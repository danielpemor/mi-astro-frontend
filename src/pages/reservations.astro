---
// src/pages/reservations.astro
import DefaultLayout from '../layouts/DefaultLayout.astro';
---

<DefaultLayout title="Reservaciones - Restaurante">
  <!-- Espaciador para navbar fijo -->
  <div class="h-20"></div>
  
  <!-- Cabecera de la p√°gina -->
  <div class="bg-gray-50 py-16">
    <div class="container mx-auto px-4 text-center">
      <h1 class="text-4xl md:text-5xl font-bold mb-4">Reservaciones</h1>
      <p class="text-gray-600 max-w-2xl mx-auto">Reserva tu mesa y disfruta de una experiencia gastron√≥mica inolvidable.</p>
    </div>
  </div>
  
  <!-- Formulario de reservaci√≥n -->
  <section class="py-20">
    <div class="container mx-auto px-4 max-w-4xl">
      <div class="bg-white rounded-lg shadow-lg overflow-hidden">
        <div class="p-8">
          <h2 class="text-2xl font-bold mb-6 text-center">Haz tu reserva</h2>
          
          <form id="reservationForm" class="space-y-6">
            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label for="nombre" class="block text-sm font-medium text-gray-700 mb-1">Nombre completo</label>
                <input 
                  type="text" 
                  id="nombre" 
                  name="nombre" 
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                  placeholder="Tu nombre"
                >
              </div>
              
              <div>
                <label for="telefono" class="block text-sm font-medium text-gray-700 mb-1">Tel√©fono</label>
                <input 
                  type="tel" 
                  id="telefono" 
                  name="telefono"
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                  placeholder="Tu n√∫mero de tel√©fono"
                >
              </div>
            </div>
            
            <div>
              <label for="email" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
              <input 
                type="email" 
                id="email" 
                name="email" 
                required
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                placeholder="Tu correo electr√≥nico"
              >
            </div>
            
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
              <div>
                <label for="fecha" class="block text-sm font-medium text-gray-700 mb-1">Fecha</label>
                <input 
                  type="date" 
                  id="fecha" 
                  name="fecha" 
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                >
              </div>
              
              <div>
                <label for="hora" class="block text-sm font-medium text-gray-700 mb-1">Hora</label>
                <select 
                  id="hora" 
                  name="hora" 
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                >
                  <option value="">Selecciona una hora</option>
                  <option value="10:00">10:00</option>
                  <option value="10:30">10:30</option>
                  <option value="11:00">11:00</option>
                  <option value="11:30">11:30</option>
                  <option value="12:00">12:00</option>
                  <option value="12:30">12:30</option>
                  <option value="13:00">13:00</option>
                  <option value="13:30">13:30</option>
                  <option value="14:00">14:00</option>
                  <option value="14:30">14:30</option>
                  <option value="15:00">15:00</option>
                  <option value="19:00">19:00</option>
                  <option value="19:30">19:30</option>
                  <option value="20:00">20:00</option>
                  <option value="20:30">20:30</option>
                  <option value="21:00">21:00</option>
                  <option value="21:30">21:30</option>
                </select>
              </div>
              
              <div>
                <label for="personas" class="block text-sm font-medium text-gray-700 mb-1">N√∫mero de personas</label>
                <select 
                  id="personas" 
                  name="personas" 
                  required
                  class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                >
                  <option value="">Selecciona</option>
                  <option value="1">1 persona</option>
                  <option value="2">2 personas</option>
                  <option value="3">3 personas</option>
                  <option value="4">4 personas</option>
                  <option value="5">5 personas</option>
                  <option value="6">6 personas</option>
                  <option value="7">7 personas</option>
                  <option value="8">8 personas</option>
                </select>
              </div>
            </div>
            
            <div>
              <label for="comentarios" class="block text-sm font-medium text-gray-700 mb-1">Comentarios adicionales</label>
              <textarea 
                id="comentarios" 
                name="comentarios" 
                rows="3"
                class="w-full px-4 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-[var(--primaryColor)] focus:border-transparent"
                placeholder="Ind√≠canos cualquier necesidad especial..."
              ></textarea>
            </div>
            
            <button 
              type="submit" 
              id="submitBtn"
              class="w-full bg-[var(--primaryColor)] text-white py-3 px-6 rounded-md hover:bg-[var(--secondaryColor)] transition-colors duration-300 font-medium disabled:opacity-50 disabled:cursor-not-allowed"
            >
              Confirmar reserva
            </button>
          </form>
        </div>
      </div>
      
      <!-- Debug info -->
      <div id="debugInfo" class="mt-4 text-center text-sm text-gray-500"></div>
      
      <!-- Informaci√≥n adicional -->
      <div class="mt-12 text-center">
        <h3 class="text-xl font-bold mb-4">Informaci√≥n adicional</h3>
        <ul class="space-y-2 text-gray-600 max-w-2xl mx-auto">
          <li>‚Ä¢ Tu reserva ser√° confirmada por tel√©fono o email.</li>
          <li>‚Ä¢ Las reservas est√°n sujetas a disponibilidad.</li>
          <li>‚Ä¢ Para grupos grandes, contacta directamente al restaurante.</li>
        </ul>
      </div>
    </div>
  </section>
</DefaultLayout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('reservationForm');
    const submitBtn = document.getElementById('submitBtn');
    const fechaInput = document.getElementById('fecha');
    const horaSelect = document.getElementById('hora');
    const debugInfo = document.getElementById('debugInfo');
    
    // Establecer fecha m√≠nima como hoy
    const today = new Date();
    const year = today.getFullYear();
    const month = (today.getMonth() + 1).toString().padStart(2, '0');
    const day = today.getDate().toString().padStart(2, '0');
    const todayStr = `${year}-${month}-${day}`;
    
    fechaInput.setAttribute('min', todayStr);
    
    // Guardar los textos originales de las opciones
    const opcionesOriginales = {};
    Array.from(horaSelect.options).forEach(option => {
      if (option.value) {
        opcionesOriginales[option.value] = option.textContent;
      }
    });
    
    // Funci√≥n para obtener fecha local en formato YYYY-MM-DD
    function getFechaLocal(date) {
      const year = date.getFullYear();
      const month = (date.getMonth() + 1).toString().padStart(2, '0');
      const day = date.getDate().toString().padStart(2, '0');
      return `${year}-${month}-${day}`;
    }
    
    // Funci√≥n para crear mensaje de debug m√°s detallado
    function updateDebugInfo(fecha, horarios) {
      let debugHTML = `
        <div style="background: #f3f4f6; padding: 10px; border-radius: 5px; margin: 10px 0; text-align: left;">
          <h4>üîç Debug Info:</h4>
          <p><strong>Fecha seleccionada:</strong> ${fecha}</p>
          <p><strong>Hora actual:</strong> ${new Date().toLocaleTimeString()}</p>
          <p><strong>Horarios:</strong></p>
          <ul style="margin: 5px 0; padding-left: 20px;">
      `;
      
      Object.entries(horarios).forEach(([hora, info]) => {
        const status = info.disponible ? '‚úÖ Disponible' : 
                      info.completo ? '‚ùå Completo' : 
                      info.pasado ? '‚è∞ Pasado' : '‚ùå No disponible';
        debugHTML += `<li><strong>${hora}:</strong> ${status} (${info.espaciosDisponibles}/${info.capacidadMaxima})</li>`;
      });
      
      debugHTML += `</ul></div>`;
      debugInfo.innerHTML = debugHTML;
    }
    
    // Verificar disponibilidad al cambiar fecha
    async function checkAvailability() {
      const fecha = fechaInput.value;
      if (!fecha) {
        // Restaurar opciones originales si no hay fecha
        Array.from(horaSelect.options).forEach(option => {
          if (option.value) {
            option.disabled = false;
            option.textContent = opcionesOriginales[option.value];
            option.classList.remove('text-gray-400');
          }
        });
        debugInfo.innerHTML = `<p>Selecciona una fecha para ver disponibilidad</p>`;
        return;
      }
      
      // Obtener hora y fecha actual del navegador
      const now = new Date();
      const horaCliente = `${now.getHours().toString().padStart(2, '0')}:${now.getMinutes().toString().padStart(2, '0')}`;
      const fechaCliente = getFechaLocal(now);
      
      console.log('=== FRONTEND DEBUG ===');
      console.log('Fecha seleccionada:', fecha);
      console.log('Fecha cliente:', fechaCliente);
      console.log('Hora cliente:', horaCliente);
      console.log('Es hoy?:', fecha === fechaCliente);
      
      try {
        const response = await fetch(`/api/availability?fecha=${fecha}&horaCliente=${horaCliente}&fechaCliente=${fechaCliente}`);
        
        if (!response.ok) {
          console.error('Error en respuesta:', response.status);
          debugInfo.innerHTML = `<p style="color: red;">Error al consultar disponibilidad: ${response.status}</p>`;
          return;
        }
        
        const data = await response.json();
        const horarios = data.horarios;
        
        console.log('=== RESPUESTA COMPLETA ===');
        console.log('Data completa:', data);
        console.log('Horarios:', horarios);
        
        // Actualizar debug info
        updateDebugInfo(fecha, horarios);
        
        // Actualizar opciones del select de hora
        let algunaDisponible = false;
        let horasDisponibles = [];
        let horasNoDisponibles = [];
        
        Array.from(horaSelect.options).forEach(option => {
          if (option.value) {
            const horaInfo = horarios[option.value];
            
            console.log(`=== PROCESANDO HORA ${option.value} ===`);
            console.log('Info de hora:', horaInfo);
            
            if (!horaInfo) {
              console.log('‚ùå No hay info para esta hora');
              option.disabled = true;
              option.textContent = `${opcionesOriginales[option.value]} - Sin info`;
              option.classList.add('text-gray-400');
              horasNoDisponibles.push(option.value);
              return;
            }
            
            // AQU√ç EST√Å LA L√ìGICA CR√çTICA
            console.log('¬øDisponible?', horaInfo.disponible);
            console.log('¬øCompleto?', horaInfo.completo);
            console.log('¬øPasado?', horaInfo.pasado);
            console.log('Espacios disponibles:', horaInfo.espaciosDisponibles);
            
            if (horaInfo.disponible === true) {
              // Hora disponible
              console.log('‚úÖ Marcando como disponible');
              option.disabled = false;
              option.textContent = `${opcionesOriginales[option.value]} (${horaInfo.espaciosDisponibles} disponibles)`;
              option.classList.remove('text-gray-400');
              algunaDisponible = true;
              horasDisponibles.push(option.value);
            } else {
              // Hora NO disponible
              console.log('‚ùå Marcando como NO disponible');
              option.disabled = true;
              
              let razon = '';
              if (horaInfo.pasado) {
                razon = ' - Hora pasada';
              } else if (horaInfo.completo) {
                razon = ' - Completo';
              } else {
                razon = ' - No disponible';
              }
              
              option.textContent = `${opcionesOriginales[option.value]}${razon}`;
              option.classList.add('text-gray-400');
              horasNoDisponibles.push(option.value);
              
              // Si la hora seleccionada ya no est√° disponible, limpiar selecci√≥n
              if (horaSelect.value === option.value) {
                horaSelect.value = '';
              }
            }
          }
        });
        
        console.log('=== RESUMEN ===');
        console.log('Horas disponibles:', horasDisponibles);
        console.log('Horas NO disponibles:', horasNoDisponibles);
        console.log('¬øAlguna disponible?:', algunaDisponible);
        
        // Forzar actualizaci√≥n visual del select
        horaSelect.style.display = 'none';
        horaSelect.offsetHeight; // Trigger reflow
        horaSelect.style.display = '';
        
      } catch (error) {
        console.error('Error verificando disponibilidad:', error);
        debugInfo.innerHTML = `<p style="color: red;">Error de conexi√≥n: ${error.message}</p>`;
      }
    }
    
    // Verificar disponibilidad cuando cambie la fecha
    fechaInput.addEventListener('change', () => {
      console.log('üìÖ Fecha cambiada, verificando disponibilidad...');
      checkAvailability();
    });
    
    // Bot√≥n manual para debug
    const debugBtn = document.createElement('button');
    debugBtn.textContent = 'üîÑ Verificar Disponibilidad';
    debugBtn.type = 'button';
    debugBtn.style.cssText = 'margin: 10px; padding: 5px 10px; background: #3b82f6; color: white; border: none; border-radius: 3px; cursor: pointer;';
    debugBtn.addEventListener('click', checkAvailability);
    debugInfo.appendChild(debugBtn);
    
    // Env√≠o del formulario (simplificado para debug)
    if (form) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const horaSeleccionada = horaSelect.value;
        if (!horaSeleccionada) {
          alert('Por favor selecciona un horario disponible.');
          return;
        }
        
        // Verificar que la hora seleccionada no est√© deshabilitada
        const optionSeleccionada = horaSelect.querySelector(`option[value="${horaSeleccionada}"]`);
        if (optionSeleccionada && optionSeleccionada.disabled) {
          alert('El horario seleccionado ya no est√° disponible. Por favor selecciona otro.');
          await checkAvailability();
          return;
        }
        
        console.log('üöÄ Enviando formulario...');
        
        submitBtn.disabled = true;
        submitBtn.textContent = 'Enviando...';
        
        const formData = new FormData(form);
        const reservationData = {
          nombre: formData.get('nombre'),
          telefono: formData.get('telefono'),
          email: formData.get('email'),
          fecha: formData.get('fecha'),
          hora: formData.get('hora'),
          personas: parseInt(formData.get('personas')),
          comentarios: formData.get('comentarios') || null
        };
        
        try {
          const response = await fetch('/api/reservations', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(reservationData)
          });
          
          if (response.ok) {
            alert('¬°Reserva recibida con √©xito!');
            form.reset();
            checkAvailability(); // Actualizar disponibilidad despu√©s de crear reserva
          } else {
            const errorData = await response.json();
            console.error('Error del servidor:', errorData);
            
            if (response.status === 409) {
              alert(`Lo sentimos, solo quedan ${errorData.disponibles || 0} lugares disponibles para este horario.`);
            } else {
              alert('El horario seleccionado no est√° disponible. Por favor, intenta con otro horario.');
            }
            
            await checkAvailability();
          }
        } catch (error) {
          console.error('Error:', error);
          alert('Error de conexi√≥n. Por favor, intenta de nuevo.');
        } finally {
          submitBtn.disabled = false;
          submitBtn.textContent = 'Confirmar reserva';
        }
      });
    }
    
    // Verificar disponibilidad al cargar si ya hay fecha seleccionada
    if (fechaInput.value) {
      checkAvailability();
    }
  });
</script>

<style>
  /* Estilos para opciones deshabilitadas */
  select option:disabled {
    color: #9ca3af !important;
    cursor: not-allowed;
  }
  
  select option.text-gray-400 {
    color: #9ca3af !important;
  }
  
  /* Mejorar apariencia del select cuando tiene opciones deshabilitadas */
  select:has(option:disabled) {
    cursor: pointer;
  }
</style>